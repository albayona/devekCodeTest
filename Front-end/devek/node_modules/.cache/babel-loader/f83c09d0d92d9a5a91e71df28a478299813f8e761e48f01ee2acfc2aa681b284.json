{"ast":null,"code":"var _jsxFileName = \"/Users/andresbayona/Documents/DevekCodeTest/Frontend/devek/src/contexts/ChatRoomsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { useAuth } from \"./UserContext\";\nimport { API_HOST } from \"../hooks/UseFetch\";\nimport { useFetch } from \"../hooks/UseFetch\";\n\n// Define Message type\n\n// Define Messages Dictionary Type\n\n// Define the Socket Context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nconst SocketContext = /*#__PURE__*/createContext(undefined);\n\n// Socket.IO server URL\nconst SOCKET_SERVER_URL = \"http://localhost:3000\"; // Change this to your backend URL\n\nexport const socket = io(SOCKET_SERVER_URL, {\n  autoConnect: false\n});\n\n// Provider Component\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [joinedRooms, setJoinedRooms] = useState([]);\n  const [availableRooms, setAvailableRooms] = useState([]);\n  const [messages, setMessages] = useState({});\n  const [isConnected, setIsConnected] = useState(socket.connected);\n  const [updateTriggerJoined, setUpdateTriggerJoined] = useState(false);\n  const [updateTriggerAvailable, setUpdateTriggerAvailable] = useState(false);\n  const {\n    user\n  } = useAuth();\n  const {\n    token\n  } = useAuth();\n  const paramsJoined = {\n    updateTrigger: updateTriggerJoined,\n    setUpdateTrigger: setUpdateTriggerJoined,\n    setData: setJoinedRooms,\n    token,\n    user,\n    endpoint: \"\",\n    queryParams: \"\"\n  };\n  const paramsAvailable = {\n    updateTrigger: updateTriggerAvailable,\n    setUpdateTrigger: setUpdateTriggerAvailable,\n    setData: setAvailableRooms,\n    token,\n    user,\n    endpoint: \"\",\n    queryParams: \"\"\n  };\n  const [error, isLoading] = useFetch(generateRequestJoined(paramsJoined));\n  const [errorA, isLoadingA] = useFetch(generateRequest(paramsAvailable));\n  function generateRequestJoined({\n    updateTrigger,\n    setUpdateTrigger,\n    setData,\n    token,\n    user,\n    endpoint,\n    queryParams\n  }) {\n    return {\n      triggerRequest: updateTrigger,\n      callback: data => {\n        setUpdateTrigger(false);\n        setData(data);\n        for (const r in Object.keys(data)) {\n          socket.emit(\"join_chat\", r);\n        }\n      },\n      method: \"GET\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"X-Consumer-Custom-Id\": String(user)\n      },\n      endpoint: `${API_HOST}/${endpoint}?${queryParams}`,\n      payload: null\n    };\n  }\n  useEffect(() => {\n    function onConnect() {\n      socket.emit(\"join\", user);\n      setIsConnected(true);\n      console.log(\"Connected to socket:\", socket.id);\n    }\n    socket.on(\"connect\", () => {\n      onConnect();\n    });\n    function onDisconnect() {\n      setIsConnected(false);\n      console.log(\"Disconnected from socket\");\n    }\n    socket.on(\"disconnect\", () => {\n      onDisconnect();\n    });\n\n    // Listen for incoming messages and update the state\n    const onMessage = data => {\n      const newMessage = {\n        sender: data.sender,\n        date: new Date().toISOString(),\n        read: false,\n        received: true,\n        text: data.message\n      };\n      setMessages(prevMessages => ({\n        ...prevMessages,\n        [data.room]: [...(prevMessages[data.room] || []), newMessage]\n      }));\n    };\n    socket.on(\"message\", onMessage);\n\n    // Cleanup function to remove event listener and disconnect\n    return () => {\n      socket.off(\"connect\", onConnect);\n      socket.off(\"disconnect\", onDisconnect);\n      socket.off(\"message\", onMessage);\n      socket.disconnect();\n    };\n  }, []);\n\n  // Emit function to send messages\n  const sendMessage = useCallback((event, data) => {\n    if (socket) {\n      socket.emit(event, data);\n    }\n  }, [socket]);\n\n  // Function to retrieve messages by room\n  const getMessagesByRoom = roomID => {\n    return messages[roomID] || [];\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      socket,\n      sendMessage,\n      getMessagesByRoom,\n      joinedRooms,\n      availableRooms\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the Socket Context\n_s(SocketProvider, \"9dpcf2VpA4I9L1a6IHleBrV39g0=\", false, function () {\n  return [useAuth, useAuth, useFetch, useFetch];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error(\"useSocket must be used within a SocketProvider\");\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","io","useAuth","API_HOST","useFetch","jsxDEV","_jsxDEV","SocketContext","undefined","SOCKET_SERVER_URL","socket","autoConnect","SocketProvider","children","_s","joinedRooms","setJoinedRooms","availableRooms","setAvailableRooms","messages","setMessages","isConnected","setIsConnected","connected","updateTriggerJoined","setUpdateTriggerJoined","updateTriggerAvailable","setUpdateTriggerAvailable","user","token","paramsJoined","updateTrigger","setUpdateTrigger","setData","endpoint","queryParams","paramsAvailable","error","isLoading","generateRequestJoined","errorA","isLoadingA","generateRequest","triggerRequest","callback","data","r","Object","keys","emit","method","headers","String","payload","onConnect","console","log","id","on","onDisconnect","onMessage","newMessage","sender","date","Date","toISOString","read","received","text","message","prevMessages","room","off","disconnect","sendMessage","event","getMessagesByRoom","roomID","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Users/andresbayona/Documents/DevekCodeTest/Frontend/devek/src/contexts/ChatRoomsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport { useAuth } from \"./UserContext\";\nimport { API_HOST } from \"../hooks/UseFetch\";\nimport { FetchRequest } from \"../hooks/UseFetch\";\nimport { useFetch } from \"../hooks/UseFetch\";\n\n// Define Message type\ninterface Message {\n  sender: string;\n  date: string;\n  read: boolean;\n  received: boolean;\n  text: string;\n}\n\n// Define Messages Dictionary Type\ninterface MessagesDictionary {\n  [roomId: string]: Message[]; \n}\n\n// Define the Socket Context type\ninterface SocketContextType {\n  socket: Socket | null;\n  sendMessage: (event: string, data: any) => void;\n  getMessagesByRoom: (roomId: string) => Message[];\n  joinedRooms: string[];\n  availableRooms: string[];\n}\n\n// Create the context\nconst SocketContext = createContext<SocketContextType | undefined>(undefined);\n\n// Socket.IO server URL\nconst SOCKET_SERVER_URL = \"http://localhost:3000\"; // Change this to your backend URL\n\n\ntype Request = {\n    updateTrigger: boolean;\n    setUpdateTrigger: (value: boolean) => void;\n    setData: (data: string[]) => void; \n    token: string;\n    user: string | null;\n    endpoint: string;\n    queryParams: string;\n  };\n  \n   \n\n  export const socket = io(SOCKET_SERVER_URL, {\n    autoConnect: false\n  });\n\n// Provider Component\nexport const SocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [joinedRooms, setJoinedRooms] = useState<string[]>([]);\n  const [availableRooms, setAvailableRooms] = useState<string[]>([]);\n  const [messages, setMessages] = useState<MessagesDictionary>({});\n\n  const [isConnected, setIsConnected] = useState<boolean>(socket.connected);\n  const [updateTriggerJoined, setUpdateTriggerJoined] = useState<boolean>(false);\n  const [updateTriggerAvailable, setUpdateTriggerAvailable] = useState<boolean>(false);\n    \n  const {user} = useAuth();\n  const {token} = useAuth();\n\n\n  const paramsJoined: Request = {updateTrigger: updateTriggerJoined, setUpdateTrigger: setUpdateTriggerJoined, setData: setJoinedRooms, token, user, endpoint: \"\", queryParams: \"\" };\n  const paramsAvailable: Request = {updateTrigger: updateTriggerAvailable, setUpdateTrigger: setUpdateTriggerAvailable, setData: setAvailableRooms, token, user, endpoint: \"\", queryParams: \"\" };\n\n    const [error, isLoading] = useFetch(generateRequestJoined(paramsJoined));\n    const [errorA, isLoadingA] = useFetch(generateRequest(paramsAvailable));\n  \n    function generateRequestJoined({\n      updateTrigger,\n      setUpdateTrigger,\n      setData,\n      token,\n      user,\n      endpoint,\n      queryParams,\n    }: Request) {\n      return {\n        triggerRequest: updateTrigger,\n        callback: (data: any) => {\n          setUpdateTrigger(false);\n          setData(data);\n\n          for (const r in Object.keys(data)) {\n            socket.emit(\"join_chat\", r);\n          }\n        \n        },\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          \"X-Consumer-Custom-Id\": String(user),\n        },\n      \n        endpoint: `${API_HOST}/${endpoint}?${queryParams}`,\n        payload: null,\n      };\n    }\n\n  useEffect(() => {\n\n    function onConnect() {\n      socket.emit(\"join\", user);\n      setIsConnected(true);\n      console.log(\"Connected to socket:\", socket.id);\n    }\n\n    socket.on(\"connect\", () => {\n      onConnect();\n    });\n\n    function onDisconnect() {\n      setIsConnected(false);\n      console.log(\"Disconnected from socket\");\n    }\n\n    socket.on(\"disconnect\", () => {\n      onDisconnect();\n\n \n    });\n\n    // Listen for incoming messages and update the state\n    const onMessage = (data: {room: string, sender: string; message: string }) => {\n      const newMessage: Message = {\n        sender: data.sender,\n        date: new Date().toISOString(),\n        read: false,\n        received: true,\n        text: data.message,\n      };\n\n      setMessages((prevMessages) => ({\n        ...prevMessages,\n        [data.room]: [...(prevMessages[data.room] || []), newMessage],\n      }));\n    };\n\n    socket.on(\"message\", onMessage);\n\n\n    // Cleanup function to remove event listener and disconnect\n    return () => {\n      socket.off(\"connect\", onConnect);\n      socket.off(\"disconnect\", onDisconnect);\n      socket.off(\"message\", onMessage);\n      socket.disconnect();\n    };\n  }, []);\n\n  // Emit function to send messages\n  const sendMessage = useCallback((event: string, data: Message) => {\n    if (socket) {\n      socket.emit(event, data);\n    }\n  }, [socket]);\n\n  // Function to retrieve messages by room\n  const getMessagesByRoom = (roomID: string): Message[] => {\n\n    return messages[roomID] || [];\n  };\n\n  return (\n    <SocketContext.Provider value={{ socket, sendMessage, getMessagesByRoom, joinedRooms, availableRooms }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n// Custom hook to use the Socket Context\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error(\"useSocket must be used within a SocketProvider\");\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}