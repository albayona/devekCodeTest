{"ast":null,"code":"import{useEffect,useState}from'react';import{useAuth}from\"../contexts/UserContext\";export const API_HOST='http://localhost:8000';export const SSE_HOST='http://localhost:8004';export const SCRAPE_HOST='http://localhost:8002';export const useFetch=request=>{const[error,setError]=useState(null);const[isLoading,setIsLoading]=useState(false);const{logOut,user}=useAuth();useEffect(()=>{let ignore=false;if(request.triggerRequest){// console.log('useFetchContentAPI', request.endpoint);\nsetIsLoading(true);const req={method:request.method,headers:request.headers};if(request.method==='POST'||request.method==='PUT'){req.body=JSON.stringify(request.payload);}fetch(request.endpoint,req).then(response=>{if(response.status===401){console.warn(\"Unauthorized request. Redirecting to login...\");if(user!==null){logOut();}throw new Error(\"Unauthorized request. Redirecting to login...\");}if(!response.ok){// error coming back from server\nthrow new Error(`Content API error: ${response.statusText}`);}return response.json();}).then(data=>{if(!ignore){request.callback(data);setError(null);setIsLoading(false);}}).catch(err=>{setError(err.message);setIsLoading(false);console.error(err);});}return()=>{ignore=true;};},[request]);return[error,isLoading];};","map":{"version":3,"names":["useEffect","useState","useAuth","API_HOST","SSE_HOST","SCRAPE_HOST","useFetch","request","error","setError","isLoading","setIsLoading","logOut","user","ignore","triggerRequest","req","method","headers","body","JSON","stringify","payload","fetch","endpoint","then","response","status","console","warn","Error","ok","statusText","json","data","callback","catch","err","message"],"sources":["/Users/andresbayona/Documents/DevekRepo/devekCodeTest/Frontend/devek/src/hooks/UseFetch.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport {useNavigate} from \"react-router-dom\";\nimport {useAuth} from \"../contexts/UserContext\";\n\nexport const API_HOST = 'http://localhost:8000';\nexport const SSE_HOST = 'http://localhost:8004';\nexport const SCRAPE_HOST = 'http://localhost:8002';\n\nexport interface FetchRequest {\n    triggerRequest: boolean;\n    setTriggerRequest: (value: boolean) => void;\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | string;\n    headers: Record<string, string>;\n    endpoint: string;\n    payload?: unknown;\n    callback: (data: any) => void;\n}\n\nexport const useFetch = (request: FetchRequest) => {\n    const [error, setError] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const {logOut, user} = useAuth();\n\n\n    useEffect(() => {\n        let ignore = false;\n        if (request.triggerRequest) {\n            // console.log('useFetchContentAPI', request.endpoint);\n            setIsLoading(true);\n\n            const req: RequestInit = {\n                method: request.method,\n                headers: request.headers,\n            };\n\n            if (request.method === 'POST' || request.method === 'PUT') {\n                req.body = JSON.stringify(request.payload);\n            }\n\n            fetch(request.endpoint, req)\n                .then(response => {\n\n                    if (response.status === 401) {\n                        console.warn(\"Unauthorized request. Redirecting to login...\");\n\n                        if (user !== null) {\n                            logOut();\n                        }\n\n                        throw new Error(\"Unauthorized request. Redirecting to login...\");\n                    }\n\n\n                    if (!response.ok) {\n                        // error coming back from server\n                        throw new Error(`Content API error: ${response.statusText}`);\n                    }\n                    return response.json();\n                })\n                .then((data) => {\n                    if (!ignore) {\n                        request.callback(data);\n                        setError(null);\n                        setIsLoading(false);\n                    }\n                })\n                .catch((err: Error) => {\n                    setError(err.message);\n                    setIsLoading(false);\n                    console.error(err);\n                });\n        }\n\n        return () => {\n            ignore = true;\n        };\n    }, [request]);\n\n    return [error, isLoading] as const;\n};\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,OAAQC,OAAO,KAAO,yBAAyB,CAE/C,MAAO,MAAM,CAAAC,QAAQ,CAAG,uBAAuB,CAC/C,MAAO,MAAM,CAAAC,QAAQ,CAAG,uBAAuB,CAC/C,MAAO,MAAM,CAAAC,WAAW,CAAG,uBAAuB,CAYlD,MAAO,MAAM,CAAAC,QAAQ,CAAIC,OAAqB,EAAK,CAC/C,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGR,QAAQ,CAAgB,IAAI,CAAC,CACvD,KAAM,CAACS,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAU,KAAK,CAAC,CAC1D,KAAM,CAACW,MAAM,CAAEC,IAAI,CAAC,CAAGX,OAAO,CAAC,CAAC,CAGhCF,SAAS,CAAC,IAAM,CACZ,GAAI,CAAAc,MAAM,CAAG,KAAK,CAClB,GAAIP,OAAO,CAACQ,cAAc,CAAE,CACxB;AACAJ,YAAY,CAAC,IAAI,CAAC,CAElB,KAAM,CAAAK,GAAgB,CAAG,CACrBC,MAAM,CAAEV,OAAO,CAACU,MAAM,CACtBC,OAAO,CAAEX,OAAO,CAACW,OACrB,CAAC,CAED,GAAIX,OAAO,CAACU,MAAM,GAAK,MAAM,EAAIV,OAAO,CAACU,MAAM,GAAK,KAAK,CAAE,CACvDD,GAAG,CAACG,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACd,OAAO,CAACe,OAAO,CAAC,CAC9C,CAEAC,KAAK,CAAChB,OAAO,CAACiB,QAAQ,CAAER,GAAG,CAAC,CACvBS,IAAI,CAACC,QAAQ,EAAI,CAEd,GAAIA,QAAQ,CAACC,MAAM,GAAK,GAAG,CAAE,CACzBC,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC,CAE7D,GAAIhB,IAAI,GAAK,IAAI,CAAE,CACfD,MAAM,CAAC,CAAC,CACZ,CAEA,KAAM,IAAI,CAAAkB,KAAK,CAAC,+CAA+C,CAAC,CACpE,CAGA,GAAI,CAACJ,QAAQ,CAACK,EAAE,CAAE,CACd;AACA,KAAM,IAAI,CAAAD,KAAK,CAAC,sBAAsBJ,QAAQ,CAACM,UAAU,EAAE,CAAC,CAChE,CACA,MAAO,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAC1B,CAAC,CAAC,CACDR,IAAI,CAAES,IAAI,EAAK,CACZ,GAAI,CAACpB,MAAM,CAAE,CACTP,OAAO,CAAC4B,QAAQ,CAACD,IAAI,CAAC,CACtBzB,QAAQ,CAAC,IAAI,CAAC,CACdE,YAAY,CAAC,KAAK,CAAC,CACvB,CACJ,CAAC,CAAC,CACDyB,KAAK,CAAEC,GAAU,EAAK,CACnB5B,QAAQ,CAAC4B,GAAG,CAACC,OAAO,CAAC,CACrB3B,YAAY,CAAC,KAAK,CAAC,CACnBiB,OAAO,CAACpB,KAAK,CAAC6B,GAAG,CAAC,CACtB,CAAC,CAAC,CACV,CAEA,MAAO,IAAM,CACTvB,MAAM,CAAG,IAAI,CACjB,CAAC,CACL,CAAC,CAAE,CAACP,OAAO,CAAC,CAAC,CAEb,MAAO,CAACC,KAAK,CAAEE,SAAS,CAAC,CAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}