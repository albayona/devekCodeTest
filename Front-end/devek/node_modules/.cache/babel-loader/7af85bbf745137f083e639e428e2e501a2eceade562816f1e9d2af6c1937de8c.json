{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState,useCallback}from\"react\";import{io}from\"socket.io-client\";import{useAuth}from\"./UserContext\";import{API_HOST}from\"../hooks/UseFetch\";import{useFetch}from\"../hooks/UseFetch\";import{fetchAPI}from\"../components/utils/fetch\";// Define Message type\n// Define Messages Dictionary Type\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Create the context\nconst SocketContext=/*#__PURE__*/createContext(undefined);// Socket.IO server URL\nconst SOCKET_SERVER_URL=\"http://localhost:3000\";// Change this to your backend URL\nexport const socket=io(SOCKET_SERVER_URL,{autoConnect:false});// Provider Component\nexport const SocketProvider=_ref=>{let{children}=_ref;const[joinedRooms,setJoinedRooms]=useState([]);const[availableRooms,setAvailableRooms]=useState([]);const[messages,setMessages]=useState({});const[notificationCount,setNotificationCount]=useState({});console.log(messages);const[isConnected,setIsConnected]=useState(socket.connected);const[updateTriggerJoined,setUpdateTriggerJoined]=useState(true);const[updateTriggerAvailable,setUpdateTriggerAvailable]=useState(true);const{user,logOut,token}=useAuth();const paramsJoined={updateTrigger:updateTriggerJoined,setUpdateTrigger:setUpdateTriggerJoined,setData:setJoinedRooms,token,user,endpoint:\"groupchats/joined/\",queryParams:\"\"};const paramsAvailable={updateTrigger:updateTriggerAvailable,setUpdateTrigger:setUpdateTriggerAvailable,setData:setAvailableRooms,token,user,endpoint:\"groupchats/available/\",queryParams:\"\"};const[error,isLoading]=useFetch(generateRequestJoined(paramsJoined,setNotificationCount));const[errorA,isLoadingA]=useFetch(generateRequestAvailable(paramsAvailable));useEffect(()=>{socket.connect();function onConnect(){socket.emit(\"join\",{\"user\":user});setIsConnected(true);console.log(\"Connected to socket:\",socket.id);}socket.on(\"connect\",()=>{onConnect();});function onDisconnect(){setIsConnected(false);console.log(\"Disconnected from socket\");}socket.on(\"disconnect\",()=>{onDisconnect();});// Listen for incoming messages and update the state\nconst onMessage=data=>{console.log(data);const newMessage={sender:data.email,date:new Date().toISOString(),read:false,received:true,text:data.text};setMessages(prevMessages=>({...prevMessages,[data.group]:[...(prevMessages[data.group]||[]),newMessage]}));setNotificationCount(prev=>({...prev,// Ensure previous state is spread properly\n[data.group]:prev[data.group]+1// Reset count for the specified room\n}));};socket.on(\"message\",onMessage);return()=>{socket.off(\"connect\",onConnect);socket.off(\"disconnect\",onDisconnect);socket.off(\"message\",onMessage);socket.disconnect();};},[]);useSocketReconnect(socket,isConnected);const joinRoom=async groupchatId=>{try{await fetchAPI(token,user,null,logOut,`${API_HOST}/groupchats/join/${groupchatId}`,'POST');setJoinedRooms(prev=>[...prev,groupchatId]);setAvailableRooms(prev=>prev.filter(room=>room!==groupchatId));socket.emit(\"join_chat\",groupchatId);}catch(error){console.error(\"Error joining room:\",error);}};const leaveRoom=async groupchatId=>{try{await fetchAPI(token,user,null,logOut,`${API_HOST}/groupchats/leave/${groupchatId}`,'POST');setJoinedRooms(prev=>prev.filter(room=>room!==groupchatId));// Remove from joined rooms\nsetAvailableRooms(prev=>[...prev,groupchatId]);// Add back to available rooms\nsocket.emit(\"leave_chat\",groupchatId);}catch(error){console.error(\"Error leaving room:\",error);}};const lastMessage=room=>{var _messages$room;return(_messages$room=messages[room])!==null&&_messages$room!==void 0&&_messages$room.length?messages[room][messages[room].length-1].text:\"\";};const readMessages=room=>{setNotificationCount(prev=>({...prev,// Ensure previous state is spread properly\n[room]:0// Reset count for the specified room\n}));};const getNotificationCount=room=>{return notificationCount[room]||0;};// Emit function to send messages\nconst sendMessage=useCallback(data=>{if(socket){socket.emit(\"message\",data);const u=String(user);console.log(user);const newMessage={sender:u,date:new Date().toISOString(),read:false,received:true,text:data.text};setMessages(prevMessages=>({...prevMessages,[data.group]:[...(prevMessages[data.group]||[]),newMessage]}));}},[socket]);// Function to retrieve messages by room\nconst getMessagesByRoom=roomID=>{return messages[roomID]||[];};return/*#__PURE__*/_jsx(SocketContext.Provider,{value:{socket,sendMessage,getMessagesByRoom,joinedRooms,availableRooms,joinRoom,leaveRoom,lastMessage,getNotificationCount,readMessages},children:children});};// Custom hook to use the Socket Context\nexport const useRoom=()=>{const context=useContext(SocketContext);if(!context){throw new Error(\"useSocket must be used within a SocketProvider\");}return context;};function generateRequestJoined(_ref2,setNotificationCount){let{updateTrigger,setUpdateTrigger,setData,token,user,endpoint,queryParams}=_ref2;return{triggerRequest:updateTrigger&&user!==null,setTriggerRequest:setUpdateTrigger,callback:data=>{setUpdateTrigger(false);setData(data['joined_groupchats']);setNotificationCount(Object.fromEntries(data['joined_groupchats'].map(item=>[item,0])));for(const g of data['joined_groupchats']){socket.emit(\"join_group\",{\"group\":g});}},method:\"GET\",headers:{\"Authorization\":`Bearer ${token}`,\"Content-Type\":\"application/json\",\"X-Consumer-Custom-Id\":String(user)},endpoint:`${API_HOST}/${endpoint}?${queryParams}`,payload:null};}function generateRequestAvailable(_ref3){let{updateTrigger,setUpdateTrigger,setData,token,user,endpoint,queryParams}=_ref3;return{triggerRequest:updateTrigger&&user!==null,setTriggerRequest:setUpdateTrigger,callback:data=>{setUpdateTrigger(false);console.log(data);setData(data['available_groupchats']);},method:\"GET\",headers:{\"Authorization\":`Bearer ${token}`,\"Content-Type\":\"application/json\",\"X-Consumer-Custom-Id\":String(user)},endpoint:`${API_HOST}/${endpoint}?${queryParams}`,payload:null};}const useSocketReconnect=(socket,isConnected)=>{useEffect(()=>{if(!isConnected&&navigator.onLine){console.log(\"Socket disconnected. Attempting to reconnect...\");socket.connect();}// Listen for when internet connection is restored\nconst handleOnline=()=>{if(!isConnected){console.log(\"Internet restored, reconnecting socket...\");socket.connect();}};window.addEventListener(\"online\",handleOnline);return()=>{window.removeEventListener(\"online\",handleOnline);};},[isConnected,socket]);};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","io","useAuth","API_HOST","useFetch","fetchAPI","jsx","_jsx","SocketContext","undefined","SOCKET_SERVER_URL","socket","autoConnect","SocketProvider","_ref","children","joinedRooms","setJoinedRooms","availableRooms","setAvailableRooms","messages","setMessages","notificationCount","setNotificationCount","console","log","isConnected","setIsConnected","connected","updateTriggerJoined","setUpdateTriggerJoined","updateTriggerAvailable","setUpdateTriggerAvailable","user","logOut","token","paramsJoined","updateTrigger","setUpdateTrigger","setData","endpoint","queryParams","paramsAvailable","error","isLoading","generateRequestJoined","errorA","isLoadingA","generateRequestAvailable","connect","onConnect","emit","id","on","onDisconnect","onMessage","data","newMessage","sender","email","date","Date","toISOString","read","received","text","prevMessages","group","prev","off","disconnect","useSocketReconnect","joinRoom","groupchatId","filter","room","leaveRoom","lastMessage","_messages$room","length","readMessages","getNotificationCount","sendMessage","u","String","getMessagesByRoom","roomID","Provider","value","useRoom","context","Error","_ref2","triggerRequest","setTriggerRequest","callback","Object","fromEntries","map","item","g","method","headers","payload","_ref3","navigator","onLine","handleOnline","window","addEventListener","removeEventListener"],"sources":["/Users/andresbayona/Documents/DevekRepo/devekCodeTest/Frontend/devek/src/contexts/ChatRoomsContext.tsx"],"sourcesContent":["import React, {createContext, useContext, useEffect, useState, useCallback} from \"react\";\nimport {io, Socket} from \"socket.io-client\";\nimport {useAuth} from \"./UserContext\";\nimport {API_HOST} from \"../hooks/UseFetch\";\nimport {FetchRequest} from \"../hooks/UseFetch\";\nimport {useFetch} from \"../hooks/UseFetch\";\nimport {fetchAPI} from \"../components/utils/fetch\";\n\n// Define Message type\ninterface Message {\n    sender: string;\n    date: string;\n    read: boolean;\n    received: boolean;\n    text: string;\n}\n\nexport interface MessageDTO {\n    group: string;\n    name: string | null;\n    email: string | null;\n    text: string;\n\n}\n\n// Define Messages Dictionary Type\ninterface MessagesDictionary {\n    [roomId: string]: Message[];\n}\n\n\n\n\ninterface SocketContextType {\n    socket: Socket | null;\n    sendMessage: (data: MessageDTO) => void;\n    getMessagesByRoom: (roomId: string) => Message[];\n    joinedRooms: string[];\n    availableRooms: string[];\n    joinRoom: (groupchatId: string) => void\n    leaveRoom: (groupchatId: string) => void\n    lastMessage: (groupchatId: string) => string,\n    getNotificationCount: (room: string) => number;\n    readMessages: (room: string) => void;\n}\n\n// Create the context\nconst SocketContext = createContext<SocketContextType | undefined>(undefined);\n\n// Socket.IO server URL\nconst SOCKET_SERVER_URL = \"http://localhost:3000\"; // Change this to your backend URL\n\n\ntype Request = {\n    updateTrigger: boolean;\n    setUpdateTrigger: (value: boolean) => void;\n    setData: (data: string[]) => void;\n    token: string;\n    user: string | null;\n    endpoint: string;\n    queryParams: string;\n};\n\n\nexport const socket = io(SOCKET_SERVER_URL, {\n    autoConnect: false\n});\n\n// Provider Component\nexport const SocketProvider: React.FC<{ children: React.ReactNode }> = ({children}) => {\n    const [joinedRooms, setJoinedRooms] = useState<string[]>([]);\n    const [availableRooms, setAvailableRooms] = useState<string[]>([]);\n    const [messages, setMessages] = useState<MessagesDictionary>({});\n    const [notificationCount, setNotificationCount] = useState<Record<string, number>>({});\n\n    console.log(messages);\n\n    const [isConnected, setIsConnected] = useState<boolean>(socket.connected);\n    const [updateTriggerJoined, setUpdateTriggerJoined] = useState<boolean>(true);\n    const [updateTriggerAvailable, setUpdateTriggerAvailable] = useState<boolean>(true);\n\n    const {user, logOut, token} = useAuth();\n\n\n    const paramsJoined: Request = {\n        updateTrigger: updateTriggerJoined,\n        setUpdateTrigger: setUpdateTriggerJoined,\n        setData: setJoinedRooms,\n        token,\n        user,\n        endpoint: \"groupchats/joined/\",\n        queryParams: \"\"\n    };\n    const paramsAvailable: Request = {\n        updateTrigger: updateTriggerAvailable,\n        setUpdateTrigger: setUpdateTriggerAvailable,\n        setData: setAvailableRooms,\n        token,\n        user,\n        endpoint: \"groupchats/available/\",\n        queryParams: \"\"\n    };\n\n    const [error, isLoading] = useFetch(generateRequestJoined(paramsJoined, setNotificationCount));\n    const [errorA, isLoadingA] = useFetch(generateRequestAvailable(paramsAvailable));\n\n\n\n    useEffect(() => {\n\n        socket.connect();\n\n        function onConnect() {\n            socket.emit(\"join\", {\"user\": user});\n            setIsConnected(true);\n            console.log(\"Connected to socket:\", socket.id);\n        }\n\n        socket.on(\"connect\", () => {\n            onConnect();\n        });\n\n        function onDisconnect() {\n            setIsConnected(false);\n            console.log(\"Disconnected from socket\");\n        }\n\n        socket.on(\"disconnect\", () => {\n            onDisconnect();\n\n\n        });\n\n        // Listen for incoming messages and update the state\n        const onMessage = (data: { group: string, name: string; email: string, text: string }) => {\n            console.log(data);\n\n            const newMessage: Message = {\n                sender: data.email,\n                date: new Date().toISOString(),\n                read: false,\n                received: true,\n                text: data.text,\n            };\n\n            setMessages((prevMessages) => ({\n                ...prevMessages,\n                [data.group]: [...(prevMessages[data.group] || []), newMessage],\n            }));\n\n            setNotificationCount((prev) => ({\n                ...prev, // Ensure previous state is spread properly\n                [data.group]: prev[data.group] + 1, // Reset count for the specified room\n            }));\n        };\n\n        socket.on(\"message\", onMessage);\n\n\n        return () => {\n            socket.off(\"connect\", onConnect);\n            socket.off(\"disconnect\", onDisconnect);\n            socket.off(\"message\", onMessage);\n            socket.disconnect();\n        };\n    }, []);\n\n\n    useSocketReconnect(socket, isConnected);\n\n\n    const joinRoom = async (groupchatId: string) => {\n        try {\n\n            await fetchAPI(token, user, null, logOut, `${API_HOST}/groupchats/join/${groupchatId}`, 'POST');\n\n            setJoinedRooms((prev) => [...prev, groupchatId]);\n            setAvailableRooms((prev) => prev.filter((room) => room !== groupchatId));\n\n            socket.emit(\"join_chat\", groupchatId);\n        } catch (error) {\n            console.error(\"Error joining room:\", error);\n        }\n    };\n\n    const leaveRoom = async (groupchatId: string) => {\n        try {\n            await fetchAPI(token, user, null, logOut, `${API_HOST}/groupchats/leave/${groupchatId}`, 'POST');\n\n            setJoinedRooms((prev) => prev.filter((room) => room !== groupchatId)); // Remove from joined rooms\n            setAvailableRooms((prev) => [...prev, groupchatId]); // Add back to available rooms\n\n            socket.emit(\"leave_chat\", groupchatId);\n        } catch (error) {\n            console.error(\"Error leaving room:\", error);\n        }\n    };\n\n    const lastMessage = (room: string) => {\n        return messages[room]?.length ? messages[room][messages[room].length - 1].text : \"\";\n    };\n\n    const readMessages = (room: string) => {\n        setNotificationCount((prev) => ({\n            ...prev, // Ensure previous state is spread properly\n            [room]: 0, // Reset count for the specified room\n        }));\n    };\n    const getNotificationCount = (room: string) => {\n        return notificationCount[room] || 0;\n    }\n\n\n\n    // Emit function to send messages\n    const sendMessage = useCallback((data: MessageDTO) => {\n        if (socket) {\n            socket.emit(\"message\", data);\n\n            const u: string = String(user);\n            console.log(user);\n\n            const newMessage: Message = {\n                sender: u,\n                date: new Date().toISOString(),\n                read: false,\n                received: true,\n                text: data.text,\n            };\n\n            setMessages((prevMessages) => ({\n                ...prevMessages,\n                [data.group]: [...(prevMessages[data.group] || []), newMessage],\n            }));\n        }\n    }, [socket]);\n\n    // Function to retrieve messages by room\n    const getMessagesByRoom = (roomID: string): Message[] => {\n\n        return messages[roomID] || [];\n    };\n\n    return (\n        <SocketContext.Provider value={{socket, sendMessage, getMessagesByRoom, joinedRooms, availableRooms, joinRoom, leaveRoom, lastMessage, getNotificationCount, readMessages}}>\n            {children}\n        </SocketContext.Provider>\n    );\n};\n\n// Custom hook to use the Socket Context\nexport const useRoom = () => {\n    const context = useContext(SocketContext);\n    if (!context) {\n        throw new Error(\"useSocket must be used within a SocketProvider\");\n    }\n    return context;\n};\n\n\nfunction generateRequestJoined({\n                                 updateTrigger,\n                                 setUpdateTrigger,\n                                 setData,\n                                 token,\n                                 user,\n                                 endpoint,\n                                 queryParams,\n                               }: Request, setNotificationCount: (data: Record<string, number>) => void) {\n  return {\n    triggerRequest: updateTrigger && user !== null,\n    setTriggerRequest: setUpdateTrigger,\n    callback: (data: any) => {\n      setUpdateTrigger(false);\n      setData(data['joined_groupchats']);\n      setNotificationCount(Object.fromEntries(data['joined_groupchats'].map( (item: string) => [item, 0])));\n\n\n\n      for (const g of data['joined_groupchats']) {\n        socket.emit(\"join_group\", {\"group\": g});\n      }\n\n    },\n    method: \"GET\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      \"X-Consumer-Custom-Id\": String(user),\n    },\n\n    endpoint: `${API_HOST}/${endpoint}?${queryParams}`,\n    payload: null,\n  };\n}\n\n\nfunction generateRequestAvailable({\n                                    updateTrigger,\n                                    setUpdateTrigger,\n                                    setData,\n                                    token,\n                                    user,\n                                    endpoint,\n                                    queryParams,\n                                  }: Request) {\n  return {\n    triggerRequest: updateTrigger && user !== null,\n    setTriggerRequest: setUpdateTrigger,\n    callback: (data: any) => {\n      setUpdateTrigger(false);\n      console.log(data);\n      setData(data['available_groupchats']);\n    },\n    method: \"GET\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      \"X-Consumer-Custom-Id\": String(user),\n    },\n\n    endpoint: `${API_HOST}/${endpoint}?${queryParams}`,\n    payload: null,\n  };\n}\n\n\nconst useSocketReconnect = (socket: any, isConnected: boolean) => {\n  useEffect(() => {\n    if (!isConnected && navigator.onLine) {\n      console.log(\"Socket disconnected. Attempting to reconnect...\");\n      socket.connect();\n    }\n\n    // Listen for when internet connection is restored\n    const handleOnline = () => {\n      if (!isConnected) {\n        console.log(\"Internet restored, reconnecting socket...\");\n        socket.connect();\n      }\n    };\n\n    window.addEventListener(\"online\", handleOnline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n    };\n  }, [isConnected, socket]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}