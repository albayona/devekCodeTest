{"ast":null,"code":"var _jsxFileName = \"/Users/andresbayona/Documents/DevekRepo/devekCodeTest/Frontend/devek/src/contexts/ChatRoomsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { useAuth } from \"./UserContext\";\nimport { API_HOST } from \"../hooks/UseFetch\";\nimport { useFetch } from \"../hooks/UseFetch\";\nimport { fetchAPI } from \"../components/utils/fetch\";\n\n// Define Message type\n\n// Define Messages Dictionary Type\n\n// Define the Socket Context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nconst SocketContext = /*#__PURE__*/createContext(undefined);\n\n// Socket.IO server URL\nconst SOCKET_SERVER_URL = \"http://localhost:3000\"; // Change this to your backend URL\n\nexport const socket = io(SOCKET_SERVER_URL, {\n  autoConnect: false\n});\n\n// Provider Component\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [joinedRooms, setJoinedRooms] = useState([]);\n  const [availableRooms, setAvailableRooms] = useState([]);\n  const [messages, setMessages] = useState({});\n  console.log(messages);\n  const [isConnected, setIsConnected] = useState(socket.connected);\n  const [updateTriggerJoined, setUpdateTriggerJoined] = useState(true);\n  const [updateTriggerAvailable, setUpdateTriggerAvailable] = useState(true);\n  const {\n    user,\n    logOut,\n    token\n  } = useAuth();\n  const paramsJoined = {\n    updateTrigger: updateTriggerJoined,\n    setUpdateTrigger: setUpdateTriggerJoined,\n    setData: setJoinedRooms,\n    token,\n    user,\n    endpoint: \"groupchats/joined/\",\n    queryParams: \"\"\n  };\n  const paramsAvailable = {\n    updateTrigger: updateTriggerAvailable,\n    setUpdateTrigger: setUpdateTriggerAvailable,\n    setData: setAvailableRooms,\n    token,\n    user,\n    endpoint: \"groupchats/available/\",\n    queryParams: \"\"\n  };\n  const [error, isLoading] = useFetch(generateRequestJoined(paramsJoined));\n  const [errorA, isLoadingA] = useFetch(generateRequestAvailable(paramsAvailable));\n  function generateRequestJoined({\n    updateTrigger,\n    setUpdateTrigger,\n    setData,\n    token,\n    user,\n    endpoint,\n    queryParams\n  }) {\n    return {\n      triggerRequest: updateTrigger && user !== null,\n      setTriggerRequest: setUpdateTrigger,\n      callback: data => {\n        setUpdateTrigger(false);\n        setData(data['joined_groupchats']);\n        for (const g of data['joined_groupchats']) {\n          socket.emit(\"join_group\", {\n            \"group\": g\n          });\n        }\n      },\n      method: \"GET\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"X-Consumer-Custom-Id\": String(user)\n      },\n      endpoint: `${API_HOST}/${endpoint}?${queryParams}`,\n      payload: null\n    };\n  }\n  function generateRequestAvailable({\n    updateTrigger,\n    setUpdateTrigger,\n    setData,\n    token,\n    user,\n    endpoint,\n    queryParams\n  }) {\n    return {\n      triggerRequest: updateTrigger && user !== null,\n      setTriggerRequest: setUpdateTrigger,\n      callback: data => {\n        setUpdateTrigger(false);\n        console.log(data);\n        setData(data['available_groupchats']);\n      },\n      method: \"GET\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"X-Consumer-Custom-Id\": String(user)\n      },\n      endpoint: `${API_HOST}/${endpoint}?${queryParams}`,\n      payload: null\n    };\n  }\n  useEffect(() => {\n    socket.connect();\n    function onConnect() {\n      socket.emit(\"join\", {\n        \"user\": user\n      });\n      setIsConnected(true);\n      console.log(\"Connected to socket:\", socket.id);\n    }\n    socket.on(\"connect\", () => {\n      onConnect();\n    });\n    function onDisconnect() {\n      setIsConnected(false);\n      console.log(\"Disconnected from socket\");\n    }\n    socket.on(\"disconnect\", () => {\n      onDisconnect();\n    });\n\n    // Listen for incoming messages and update the state\n    const onMessage = data => {\n      console.log(data);\n      const newMessage = {\n        sender: data.email,\n        date: new Date().toISOString(),\n        read: false,\n        received: true,\n        text: data.text\n      };\n      setMessages(prevMessages => ({\n        ...prevMessages,\n        [data.group]: [...(prevMessages[data.group] || []), newMessage]\n      }));\n    };\n    socket.on(\"message\", onMessage);\n    return () => {\n      socket.off(\"connect\", onConnect);\n      socket.off(\"disconnect\", onDisconnect);\n      socket.off(\"message\", onMessage);\n      socket.disconnect();\n    };\n  }, []);\n  const joinRoom = async groupchatId => {\n    try {\n      const res = fetchAPI(token, user, null, logOut, `${API_HOST}/groupchats/join/${groupchatId}`, 'POST');\n      const response = await fetch(`${API_HOST}/groupchats/join/${groupchatId}`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          \"X-Consumer-Custom-Id\": String(user)\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to join room\");\n      }\n      const data = await response.json();\n      setJoinedRooms(prev => [...prev, groupchatId]);\n      setAvailableRooms(prev => prev.filter(room => room !== groupchatId));\n      socket.emit(\"join_chat\", groupchatId);\n    } catch (error) {\n      console.error(\"Error joining room:\", error);\n    }\n  };\n\n  // Emit function to send messages\n  const sendMessage = useCallback(data => {\n    if (socket) {\n      socket.emit(\"message\", data);\n      const u = String(user);\n      console.log(user);\n      const newMessage = {\n        sender: u,\n        date: new Date().toISOString(),\n        read: false,\n        received: true,\n        text: data.text\n      };\n      setMessages(prevMessages => ({\n        ...prevMessages,\n        [data.group]: [...(prevMessages[data.group] || []), newMessage]\n      }));\n    }\n  }, [socket]);\n\n  // Function to retrieve messages by room\n  const getMessagesByRoom = roomID => {\n    return messages[roomID] || [];\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      socket,\n      sendMessage,\n      getMessagesByRoom,\n      joinedRooms,\n      availableRooms,\n      joinRoom\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the Socket Context\n_s(SocketProvider, \"pcEIdzakL00ouR5nClWujxeHnBQ=\", false, function () {\n  return [useAuth, useFetch, useFetch];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error(\"useSocket must be used within a SocketProvider\");\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","io","useAuth","API_HOST","useFetch","fetchAPI","jsxDEV","_jsxDEV","SocketContext","undefined","SOCKET_SERVER_URL","socket","autoConnect","SocketProvider","children","_s","joinedRooms","setJoinedRooms","availableRooms","setAvailableRooms","messages","setMessages","console","log","isConnected","setIsConnected","connected","updateTriggerJoined","setUpdateTriggerJoined","updateTriggerAvailable","setUpdateTriggerAvailable","user","logOut","token","paramsJoined","updateTrigger","setUpdateTrigger","setData","endpoint","queryParams","paramsAvailable","error","isLoading","generateRequestJoined","errorA","isLoadingA","generateRequestAvailable","triggerRequest","setTriggerRequest","callback","data","g","emit","method","headers","String","payload","connect","onConnect","id","on","onDisconnect","onMessage","newMessage","sender","email","date","Date","toISOString","read","received","text","prevMessages","group","off","disconnect","joinRoom","groupchatId","res","response","fetch","ok","Error","json","prev","filter","room","sendMessage","u","getMessagesByRoom","roomID","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","$RefreshReg$"],"sources":["/Users/andresbayona/Documents/DevekRepo/devekCodeTest/Frontend/devek/src/contexts/ChatRoomsContext.tsx"],"sourcesContent":["import React, {createContext, useContext, useEffect, useState, useCallback} from \"react\";\nimport {io, Socket} from \"socket.io-client\";\nimport {useAuth} from \"./UserContext\";\nimport {API_HOST} from \"../hooks/UseFetch\";\nimport {FetchRequest} from \"../hooks/UseFetch\";\nimport {useFetch} from \"../hooks/UseFetch\";\nimport {fetchAPI} from \"../components/utils/fetch\";\n\n// Define Message type\ninterface Message {\n    sender: string;\n    date: string;\n    read: boolean;\n    received: boolean;\n    text: string;\n}\n\nexport interface MessageDTO {\n    group: string;\n    name: string | null;\n    email: string | null;\n    text: string;\n\n}\n\n// Define Messages Dictionary Type\ninterface MessagesDictionary {\n    [roomId: string]: Message[];\n}\n\n// Define the Socket Context type\ninterface SocketContextType {\n    socket: Socket | null;\n    sendMessage: (data: MessageDTO) => void;\n    getMessagesByRoom: (roomId: string) => Message[];\n    joinedRooms: string[];\n    availableRooms: string[];\n    joinRoom: (groupchatId: string) => void\n}\n\n// Create the context\nconst SocketContext = createContext<SocketContextType | undefined>(undefined);\n\n// Socket.IO server URL\nconst SOCKET_SERVER_URL = \"http://localhost:3000\"; // Change this to your backend URL\n\n\ntype Request = {\n    updateTrigger: boolean;\n    setUpdateTrigger: (value: boolean) => void;\n    setData: (data: string[]) => void;\n    token: string;\n    user: string | null;\n    endpoint: string;\n    queryParams: string;\n};\n\n\nexport const socket = io(SOCKET_SERVER_URL, {\n    autoConnect: false\n});\n\n// Provider Component\nexport const SocketProvider: React.FC<{ children: React.ReactNode }> = ({children}) => {\n    const [joinedRooms, setJoinedRooms] = useState<string[]>([]);\n    const [availableRooms, setAvailableRooms] = useState<string[]>([]);\n    const [messages, setMessages] = useState<MessagesDictionary>({});\n\n    console.log(messages);\n\n    const [isConnected, setIsConnected] = useState<boolean>(socket.connected);\n    const [updateTriggerJoined, setUpdateTriggerJoined] = useState<boolean>(true);\n    const [updateTriggerAvailable, setUpdateTriggerAvailable] = useState<boolean>(true);\n\n    const {user, logOut, token} = useAuth();\n\n\n    const paramsJoined: Request = {\n        updateTrigger: updateTriggerJoined,\n        setUpdateTrigger: setUpdateTriggerJoined,\n        setData: setJoinedRooms,\n        token,\n        user,\n        endpoint: \"groupchats/joined/\",\n        queryParams: \"\"\n    };\n    const paramsAvailable: Request = {\n        updateTrigger: updateTriggerAvailable,\n        setUpdateTrigger: setUpdateTriggerAvailable,\n        setData: setAvailableRooms,\n        token,\n        user,\n        endpoint: \"groupchats/available/\",\n        queryParams: \"\"\n    };\n\n    const [error, isLoading] = useFetch(generateRequestJoined(paramsJoined));\n    const [errorA, isLoadingA] = useFetch(generateRequestAvailable(paramsAvailable));\n\n    function generateRequestJoined({\n                                       updateTrigger,\n                                       setUpdateTrigger,\n                                       setData,\n                                       token,\n                                       user,\n                                       endpoint,\n                                       queryParams,\n                                   }: Request) {\n        return {\n            triggerRequest: updateTrigger && user !== null,\n            setTriggerRequest: setUpdateTrigger,\n            callback: (data: any) => {\n                setUpdateTrigger(false);\n                setData(data['joined_groupchats']);\n\n                for (const g of data['joined_groupchats']) {\n                    socket.emit(\"join_group\", {\"group\": g});\n                }\n\n            },\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n                \"X-Consumer-Custom-Id\": String(user),\n            },\n\n            endpoint: `${API_HOST}/${endpoint}?${queryParams}`,\n            payload: null,\n        };\n    }\n\n\n    function generateRequestAvailable({\n                                          updateTrigger,\n                                          setUpdateTrigger,\n                                          setData,\n                                          token,\n                                          user,\n                                          endpoint,\n                                          queryParams,\n                                      }: Request) {\n        return {\n            triggerRequest: updateTrigger && user !== null,\n            setTriggerRequest: setUpdateTrigger,\n            callback: (data: any) => {\n                setUpdateTrigger(false);\n                console.log(data);\n                setData(data['available_groupchats']);\n            },\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n                \"X-Consumer-Custom-Id\": String(user),\n            },\n\n            endpoint: `${API_HOST}/${endpoint}?${queryParams}`,\n            payload: null,\n        };\n    }\n\n\n    useEffect(() => {\n\n        socket.connect();\n\n        function onConnect() {\n            socket.emit(\"join\", {\"user\": user});\n            setIsConnected(true);\n            console.log(\"Connected to socket:\", socket.id);\n        }\n\n        socket.on(\"connect\", () => {\n            onConnect();\n        });\n\n        function onDisconnect() {\n            setIsConnected(false);\n            console.log(\"Disconnected from socket\");\n        }\n\n        socket.on(\"disconnect\", () => {\n            onDisconnect();\n\n\n        });\n\n        // Listen for incoming messages and update the state\n        const onMessage = (data: { group: string, name: string; email: string, text: string }) => {\n            console.log(data);\n\n            const newMessage: Message = {\n                sender: data.email,\n                date: new Date().toISOString(),\n                read: false,\n                received: true,\n                text: data.text,\n            };\n\n            setMessages((prevMessages) => ({\n                ...prevMessages,\n                [data.group]: [...(prevMessages[data.group] || []), newMessage],\n            }));\n        };\n\n        socket.on(\"message\", onMessage);\n\n\n        return () => {\n            socket.off(\"connect\", onConnect);\n            socket.off(\"disconnect\", onDisconnect);\n            socket.off(\"message\", onMessage);\n            socket.disconnect();\n        };\n    }, []);\n\n\n    const joinRoom = async (groupchatId: string) => {\n        try {\n\n            const res = fetchAPI(token, user, null, logOut, `${API_HOST}/groupchats/join/${groupchatId}`, 'POST');\n\n            const response = await fetch(`${API_HOST}/groupchats/join/${groupchatId}`, {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\",\n                    \"X-Consumer-Custom-Id\": String(user),\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error(\"Failed to join room\");\n            }\n\n            const data = await response.json();\n\n            setJoinedRooms((prev) => [...prev, groupchatId]);\n            setAvailableRooms((prev) => prev.filter((room) => room !== groupchatId));\n\n            socket.emit(\"join_chat\", groupchatId);\n        } catch (error) {\n            console.error(\"Error joining room:\", error);\n        }\n    };\n\n\n    // Emit function to send messages\n    const sendMessage = useCallback((data: MessageDTO) => {\n        if (socket) {\n            socket.emit(\"message\", data);\n\n            const u: string = String(user);\n            console.log(user);\n\n            const newMessage: Message = {\n                sender: u,\n                date: new Date().toISOString(),\n                read: false,\n                received: true,\n                text: data.text,\n            };\n\n            setMessages((prevMessages) => ({\n                ...prevMessages,\n                [data.group]: [...(prevMessages[data.group] || []), newMessage],\n            }));\n        }\n    }, [socket]);\n\n    // Function to retrieve messages by room\n    const getMessagesByRoom = (roomID: string): Message[] => {\n\n        return messages[roomID] || [];\n    };\n\n    return (\n        <SocketContext.Provider value={{socket, sendMessage, getMessagesByRoom, joinedRooms, availableRooms, joinRoom}}>\n            {children}\n        </SocketContext.Provider>\n    );\n};\n\n// Custom hook to use the Socket Context\nexport const useSocket = () => {\n    const context = useContext(SocketContext);\n    if (!context) {\n        throw new Error(\"useSocket must be used within a SocketProvider\");\n    }\n    return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}